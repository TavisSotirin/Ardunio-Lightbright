#pragma once
#include <core.h>
#include <Adafruit_Protomatter.h>
#include "fileSystem.h"

const size_t IMAGE_SIZE = 64*64;
uint16_t IMAGE_MATRIX[IMAGE_SIZE];
float brightness = 1;
bool updatingImage = false;

const uint16_t newUnicorn[IMAGE_SIZE] = {};

// Define pins for rgb matrix
uint8_t rgbPins[]  = {7, 8, 9, 10, 11, 12};
uint8_t addrPins[] = {17, 18, 19, 20, 21};  
uint8_t clockPin   = 14;
uint8_t latchPin   = 15;
uint8_t oePin      = 16;

Adafruit_Protomatter matrix(
  64,          // Width of matrix (or matrix chain) in pixels
  4,           // Bit depth, 1-6
  1, rgbPins,  // # of matrix chains, array of 6 RGB pins for each
  5, addrPins, // # of address pins (height is inferred), array of pins
  clockPin, latchPin, oePin, // Other matrix control pins
  false);      // No double-buffering here (see "doublebuffer" example)


void setupMatrix()
{
  // Initialize matrix...
  ProtomatterStatus mat_status = matrix.begin();
  Serial.print("Protomatter begin() status: ");
  Serial.println((int)mat_status);
  if(mat_status != PROTOMATTER_OK) {
    // DO NOT CONTINUE if matrix setup encountered an error.
    for(;;);
  }
}

void displayText(const char* text, uint timeDelay = 0)
{
  matrix.println(text);
  matrix.show();

  if (timeDelay > 0)
  {
    delay(timeDelay);
    matrix.fillScreen(0);
    matrix.show();
  }
}

void setColorBrightness(uint16_t* color)
{
  //uint8_t red,green,blue = 0;

  //red = ((*color & 0xf800) >> 0x8) | 0x7;
  //green = ((*color & 0x7e0) >> 0x3) | 0x3;
  //blue = ((*color & 0x1f) << 0x3) | 0x7;

  //red = (uint8_t)(red * brightness);
  //green = (uint8_t)(green * brightness);
  //blue = (uint8_t)(blue * brightness);

  //*color = ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | (blue >> 3);
  
  *color = (( (uint8_t)((((*color & 0xf800) >> 0x8) | 0x7) * brightness) & 0xF8) << 8) | ((((uint8_t)((((*color & 0x7e0) >> 0x3) | 0x3) * brightness)) & 0xFC) << 3) | (((uint8_t)((((*color & 0x1f) << 0x3) | 0x7) * brightness)) >> 3);
}

void parseImageData(const char* filename)
{
  curFile = fatfs.open(filename, FILE_READ);

  // if file pointer is valid and is an open file
  if (curFile && IMAGE_MATRIX)
  {
    String str = "";
    char* ptr;
    uint16_t color = 0;
    int i = 0;

    while(curFile.available() && i < IMAGE_SIZE)
    {
      // read a line
      str = curFile.readStringUntil('\n');

      // convert text to int for color value, or set to 0 if failed
      color = (uint16_t)strtol(str.c_str(), &ptr, 10);

      // set color in matrix and increment index
      IMAGE_MATRIX[i] = color;
      i++;
    }

    curFile.close();
  }
  else 
  {
    if (Serial)
      Serial.printf("Error opening %s",filename);
  }
}

void displayImage()
{
  uint16_t* internalPtr = matrix.getBuffer();

  for (int i=0; i < IMAGE_SIZE; i++)
  {
    uint16_t color = IMAGE_MATRIX[i];
    setColorBrightness(&color);
    internalPtr[i] = color;
  }

  matrix.show();
}

void changeBrightness(bool inc)
{
  updatingImage = true;

  float tmp = brightness;
  
  if (inc)
  {
    brightness += 0.1f;
    brightness = brightness < 1.0f ? brightness : 1.0f;
  }
  else
  {
    brightness -= 0.1f;
    brightness = brightness > 0 ? brightness : 0;
  }

  if (brightness != tmp) displayImage();

  updatingImage = false;
}

